{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA,oFAA4B;;;;;;;;;;;ACA5B,YAAY;AACZ,qCAAyB;AAEzB,SAAgB,QAAQ,CAAC,IAAY;IACnC,MAAM,OAAO,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7B,CAAC;AAHD,4BAGC;AAED,SAAgB,QAAQ,CAAC,IAAY,EAAE,IAA4B;IACjE,EAAE,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;AAC/C,CAAC;AAFD,4BAEC;;;;;;;;ACVD;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;ACtBA;;;GAGG;;AAEH,iEAA+D;AAC/D,+CAAmC;AACnC,yCAA6B;AAC7B,qCAAyB;AAEzB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;AACxB,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;AAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAEpE,SAAS,eAAe;IACtB,MAAM,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,mBAAmB,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACpE,IAAI,mBAAmB,KAAK,CAAC,CAAC,EAAE;QAC9B,EAAE,CAAC,aAAa,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;KACzC;AACH,CAAC;AAED,eAAe,EAAE,CAAC;AAElB,SAAS,eAAe,CAAC,EAAU;IACjC,MAAM,IAAI,GAAG,oBAAQ,EAAC,eAAe,CAAC,CAAC;IACvC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;AACrD,CAAC;AAED,SAAS,aAAa;IACpB,OAAO,oBAAQ,EAAC,eAAe,CAAC,CAAC;AACnC,CAAC;AAED,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC3B,MAAM,aAAa,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACrD,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAC1B,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACzB,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAEtB,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IAEnC,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,MAAM,CAAC;IAE5B,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtB,oBAAQ,EAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAEtC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC7B,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IACtB,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC9C,IAAI,CAAC,MAAM,EAAE;QACX,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KAC9B;IAED,MAAM,SAAS,mCACV,MAAM,GACN,IAAI,CACR,CAAC;IACF,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IACnC,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC;IACtC,oBAAQ,EAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IAEtC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;AACjC,CAAC,CAAC,CAAC;AAEH,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IAC9B,MAAM,UAAU,GAAG,aAAa,EAAE,CAAC;IACnC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;IAC1B,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;IACrB,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QACjC,IAAI,MAAM,CAAC,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE;YAC9B,WAAW,GAAG,GAAG,CAAC;SACnB;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;QACtB,OAAO,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;KACrC;IACD,UAAU,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;IAElC,oBAAQ,EAAC,eAAe,EAAE,UAAU,CAAC,CAAC;IACtC,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;AACnC,CAAC,CAAC,CAAC;AAEH,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AACtC,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACnC,OAAO,CAAC,GAAG,CAAC,iCAAiC,IAAI,MAAM,CAAC,CAAC;AAC3D,CAAC,CAAC,CAAC;AACH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC","sources":["webpack://cc-fault-tolerance/./libs/utils/src/index.ts","webpack://cc-fault-tolerance/./libs/utils/src/lib/utils.ts","webpack://cc-fault-tolerance/external commonjs \"express\"","webpack://cc-fault-tolerance/external commonjs \"tslib\"","webpack://cc-fault-tolerance/external node-commonjs \"fs\"","webpack://cc-fault-tolerance/external node-commonjs \"path\"","webpack://cc-fault-tolerance/webpack/bootstrap","webpack://cc-fault-tolerance/./apps/database/src/main.ts"],"sourcesContent":["export * from './lib/utils';\n","//@ts-ignore\nimport * as fs from 'fs';\n\nexport function readJson(path: string): Array<any> {\n  const content = fs.readFileSync(path, 'utf-8');\n  return JSON.parse(content);\n}\n\nexport function saveJson(path: string, data: { [key: string]: any }): void {\n  fs.writeFileSync(path, JSON.stringify(data));\n}\n\n","module.exports = require(\"express\");","module.exports = require(\"tslib\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { readJson, saveJson } from '@cc-fault-tolerance/utils';\nimport * as express from 'express';\nimport * as path from 'path';\nimport * as fs from 'fs';\n\nconst app = express();\napp.use(express.json());\nconst dbBasePaths = path.resolve('datastore');\nconst thisDbDatastore = path.join(dbBasePaths, process.env.DB_FILE);\n\nfunction createDatastore() {\n  const datastores = fs.readdirSync(dbBasePaths);\n  const hasDatastoreCreated = datastores.indexOf(process.env.DB_FILE);\n  if (hasDatastoreCreated === -1) {\n    fs.writeFileSync(thisDbDatastore, '[]');\n  }\n}\n\ncreateDatastore();\n\nfunction getRecordFromId(id: string) {\n  const data = readJson(thisDbDatastore);\n  return data.find((record: any) => record.id == id);\n}\n\nfunction getAllRecords() {\n  return readJson(thisDbDatastore);\n}\n\napp.get('/:id', (req, res) => {\n  const retrievedData = getRecordFromId(req.params.id);\n  res.send(retrievedData);\n});\n\napp.post('/', (req, res) => {\n  const data = req.body;\n\n  const allRecords = getAllRecords();\n  \n  data.id = allRecords.length;\n\n  allRecords.push(data);\n  saveJson(thisDbDatastore, allRecords);\n\n  res.send({ message: 'Saved' });\n});\n\napp.patch('/:id', (req, res) => {\n  const data = req.body;\n  const record = getRecordFromId(req.params.id);\n  if (!record) {\n    res.send('Record not found');\n  }\n\n  const newRecord = {\n    ...record,\n    ...data\n  };\n  const allRecords = getAllRecords();\n  allRecords[req.params.id] = newRecord;\n  saveJson(thisDbDatastore, allRecords);\n\n  res.send({ message: 'Saved' });\n});\n\napp.delete('/:id', (req, res) => {\n  const allRecords = getAllRecords();\n  console.log(req.params.id)\n  let recordIndex = -1;\n  allRecords.forEach((record, idx) => {\n    if (record.id == req.params.id) {\n      recordIndex = idx;\n    }\n  });\n\n  if (recordIndex === -1) {\n    return res.send('Record not found');\n  }\n  allRecords.splice(recordIndex, 1);\n\n  saveJson(thisDbDatastore, allRecords);\n  res.send({ message: 'Deleted' });\n});\n\nconst port = process.env.port || 3333;\nconst server = app.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}/api`);\n});\nserver.on('error', console.error);\n"],"names":[],"sourceRoot":""}